// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name WannaUI
import Combine
import Foundation
import Lottie
import Swift
import SwiftUI
import UIKit
import WebKit
@_exported import WsneakersUISDK
import _Concurrency
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func addChild(_ childController: UIKit.UIViewController, to view: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) public func uninstallFromParent()
}
@available(iOS 13.0, *)
extension WannaUI.WannaBags.UISettings {
  public struct Error {
    public var isHidden: Swift.Bool
  }
}
@available(iOS 13.0, *)
extension WannaUI.WannaBags.UISettings {
  public struct POI {
    public var textHandler: ((Swift.Int) -> Swift.String?)?
  }
}
@available(iOS 13.0, *)
extension WannaUI.WannaBags.UISettings {
  public struct CanHold {
    public var title: Swift.String
    public var isHidden: Swift.Bool
  }
}
@available(iOS 13.0, *)
extension WannaUI.WannaBags.UISettings.Onboarding {
  public enum Step : Swift.CaseIterable {
    case pinchToZoom
    public static func == (a: WannaUI.WannaBags.UISettings.Onboarding.Step, b: WannaUI.WannaBags.UISettings.Onboarding.Step) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [WannaUI.WannaBags.UISettings.Onboarding.Step]
    public static var allCases: [WannaUI.WannaBags.UISettings.Onboarding.Step] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, *)
extension WannaUI.WannaBags {
  public enum Error : Swift.Error {
    case setModelFailed(modelId: Swift.String)
    case initializationFailed(error: Swift.Error)
  }
}
@available(iOS 13.0, *)
extension WannaUI.WannaBags.Error : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13.0, *)
extension WannaUI.WannaBags {
  public struct UISettings {
    public var canHold: WannaUI.WannaBags.UISettings.CanHold
    public var poi: WannaUI.WannaBags.UISettings.POI
    public var onboarding: WannaUI.WannaBags.UISettings.Onboarding
    public var loading: WannaUI.WannaBags.UISettings.Loading
    public var error: WannaUI.WannaBags.UISettings.Error
    public static var `default`: WannaUI.WannaBags.UISettings
    public init()
  }
}
@available(iOS 13.0, *)
public enum WannaBags {
}
@objc @_inheritsConvenienceInitializers @available(iOS 13.0, *)
@_Concurrency.MainActor(unsafe) open class ReactiveViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) final public let onViewDidLoad: Combine.AnyPublisher<Swift.Void, Swift.Never>
  @_Concurrency.MainActor(unsafe) final public let onViewWillAppear: Combine.AnyPublisher<Swift.Bool, Swift.Never>
  @_Concurrency.MainActor(unsafe) final public let onViewDidAppear: Combine.AnyPublisher<Swift.Bool, Swift.Never>
  @_Concurrency.MainActor(unsafe) final public let onViewWillDisappear: Combine.AnyPublisher<Swift.Bool, Swift.Never>
  @_Concurrency.MainActor(unsafe) final public let onViewDidDisappear: Combine.AnyPublisher<Swift.Bool, Swift.Never>
  @_Concurrency.MainActor(unsafe) final public let onMemoryWarning: Combine.AnyPublisher<Swift.Void, Swift.Never>
  @_Concurrency.MainActor(unsafe) final public let onViewWillLayoutSubviews: Combine.AnyPublisher<Swift.Void, Swift.Never>
  @_Concurrency.MainActor(unsafe) final public let onViewDidLayoutSubviews: Combine.AnyPublisher<Swift.Void, Swift.Never>
  @_Concurrency.MainActor(unsafe) final public let onDeinit: Combine.AnyPublisher<Swift.Void, Swift.Never>
  @_Concurrency.MainActor(unsafe) final public let onIsActive: Combine.AnyPublisher<Swift.Bool, Swift.Never>
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didReceiveMemoryWarning()
}
@available(iOS 13.0, *)
extension WannaUI.WannaBags.UISettings {
  public struct Loading {
    public var title: Swift.String
    public var isHidden: Swift.Bool
  }
}
@available(iOS 13.0, *)
extension WannaUI.WannaBags {
  @_hasMissingDesignatedInitializers final public class Flow : WsneakersUISDK.WannaFlow {
    override final public class var isDeviceSupported: Swift.Bool {
      get
    }
    override final public var modelsController: WsneakersUISDK.WannaModelsController {
      get
    }
    override final public func start() throws -> WsneakersUISDK.WannaFlow.ViewController
    @objc deinit
  }
}
@available(iOS 13.0, *)
extension WannaUI.WannaBags.Flow {
  final public func restart()
}
@available(iOS 13.0, *)
extension WannaUI.WannaBags.Flow {
  final public func withModelID(_ modelId: Swift.String) -> Self
  final public func withEventHandler(_ handler: @escaping (WannaUI.WannaBags.Event) -> Swift.Void) -> Self
  final public func withErrorHandler(_ handler: @escaping (WannaUI.WannaBags.Error) -> Swift.Void) -> Self
  final public func withProgressHandler(_ handler: @escaping (WannaUI.WannaProgress) -> Swift.Void) -> Self
  final public func withControlsContainer(_ container: UIKit.UIView) -> Self
  final public func withUISettings(_ settings: WannaUI.WannaBags.UISettings) -> Self
}
@available(iOS 13.0, *)
extension WannaUI.WannaBags {
  @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class ViewController : WannaUI.ReactiveViewController {
    @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
    @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLayoutSubviews()
    @objc deinit
  }
}
extension WannaUI.WannaBags.Flow {
  convenience public init(config: WsneakersUISDK.WannaConfig, modelId: Swift.String)
}
@available(iOS 13.0, *)
extension WannaUI.WannaBags.UISettings {
  public struct Onboarding {
    public var isDisabled: Swift.Bool
    public var stepLocalizationHandler: ((WannaUI.WannaBags.UISettings.Onboarding.Step) -> Swift.String)?
  }
}
@frozen public enum WannaProgress {
  case loading(progress: Swift.Float)
  case finished
}
@available(iOS 13.0, *)
extension WannaUI.WannaBags {
  public enum Event {
    case onModelLoaded(modelId: Swift.String)
    case onDimensionsSwitched(toActive: Swift.Bool)
    case onPOISwitched(toIndex: Swift.Int)
    case onRetry
  }
}
@available(iOS 13.0, *)
extension WannaUI.WannaBags.UISettings.Onboarding.Step : Swift.Equatable {}
@available(iOS 13.0, *)
extension WannaUI.WannaBags.UISettings.Onboarding.Step : Swift.Hashable {}
extension WannaUI.WannaProgress : Swift.Sendable {}
